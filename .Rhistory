} else if (license_choice == 3){
usethis::use_apache_license()
} else if (license_choice == 4) {
usethis::use_cc0_license()
} else {
cat("Invalid choice. Defaulting to MIT license.\n")
usethis::use_mit_license()
}
# Create custom directories
dir.create("data")
dir.create("data-raw")
dir.create("inst")
dir.create("inst/sandbox")
dir.create("tests")
# Add testing infrastructure
usethis::use_testthat()
# Install required packages
usethis::use_package("learnr")
# Provide hints for filling out README
cat("Hints for filling out README.md based on Hadley Wickham's design principles:\n",
"- Clearly state what the package does at the beginning of README.md\n",
"- Include installation instructions\n",
"- Provide a quick demo of the package with minimal examples\n",
"- Use bullet points for key features\n",
"- Include links to more extensive documentation or vignettes\n")
# Return a message indicating the package was created
return("Open Science Template Package created successfully")
}
devtools::load_all("~/rpackages/opensciPackR")
createOpenSciPackage("testpackage", path = "C:/Users/LaraK/Documents/rpackages")
usethis::use_roxygen_md()
devtools::load_all("~/rpackages/opensciPackR")
?opensciPackR
devtools::load_all("~/rpackages/opensciPackR")
rm(list = c("createOpenSciPackage"))
devtools::load_all("~/rpackages/opensciPackR")
usethis::use_description(fields = list(
'Title' = 'Open Science Template Package',
'Author' = author_name,
'Maintainer' = paste(author_name, '<', author_email, '>', sep = ''),
'Description' = 'This package serves as a template for creating open science R packages. It includes functionality for common tasks in open science such as data preparation and analysis, and it encourages best practices for reproducibility and transparency.',
'License' = 'MIT',
'Imports' = 'learnr',
'Encoding' = 'UTF-8',
'LazyData' = 'true'
))
author_name = "Lara Kobilke"
usethis::use_description(fields = list(
'Title' = 'Open Science Template Package',
'Author' = author_name,
'Maintainer' = paste(author_name, '<', author_email, '>', sep = ''),
'Description' = 'This package serves as a template for creating open science R packages. It includes functionality for common tasks in open science such as data preparation and analysis, and it encourages best practices for reproducibility and transparency.',
'License' = 'MIT',
'Imports' = 'learnr',
'Encoding' = 'UTF-8',
'LazyData' = 'true'
))
author_email = "lara.kobilke@ifkw.lmu.de"
usethis::use_description(fields = list(
'Title' = 'Open Science Template Package',
'Author' = author_name,
'Maintainer' = paste(author_name, '<', author_email, '>', sep = ''),
'Description' = 'This package serves as a template for creating open science R packages. It includes functionality for common tasks in open science such as data preparation and analysis, and it encourages best practices for reproducibility and transparency.',
'License' = 'MIT',
'Imports' = 'learnr',
'Encoding' = 'UTF-8',
'LazyData' = 'true'
))
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
usethis::use_test("createOpenSciPackage")
test_that("createOpenSciPackage returns the correct success message", {
# Create a temporary directory
temp_dir <- tempdir()
# Create a package in the temporary directory
test_package_name <- "testPackage"
test_author_name <- "Test Author"
test_author_email <- "test@email.com"
test_license_choice <- 1 # MIT license
result <- createOpenSciPackage(test_package_name, temp_dir, test_author_name, test_author_email, test_license_choice)
# Check that the function returned the correct success message
expect_equal(result, "Open Science Template Package created successfully")
})
createOpenSciPackageWrapper <- function(package_name, path = NULL, author_name, author_email, license_choice) {
# Simulate the user inputs
utils::menu <- function(choices, title = NULL, graphics = TRUE) license_choice
readline <- function(prompt) {
switch(prompt,
"Enter the author's name: " = author_name,
"Enter the author's email: " = author_email,
stop("Unknown prompt"))
}
createOpenSciPackage(package_name, path)
}
test_that("createOpenSciPackage returns the correct success message", {
# Create a temporary directory
temp_dir <- tempdir()
# Create a package in the temporary directory
test_package_name <- "testPackage"
test_author_name <- "Test Author"
test_author_email <- "test@email.com"
test_license_choice <- 1 # MIT license
result <- createOpenSciPackageWrapper(test_package_name, temp_dir, test_author_name, test_author_email, test_license_choice)
# Check that the function returned the correct success message
expect_equal(result, "Open Science Template Package created successfully")
})
devtools::load_all("~/rpackages/opensciPackR")
createOpenSciPackageWrapper <- function(package_name, path = NULL, author_name, author_email, license_choice) {
# Simulate the user inputs
utils::menu <- function(choices, title = NULL, graphics = TRUE) license_choice
readline <- function(prompt) {
switch(prompt,
"Enter the author's name: " = author_name,
"Enter the author's email: " = author_email,
stop("Unknown prompt"))
}
createOpenSciPackage(package_name, path)
}
test_that("createOpenSciPackage returns the correct success message", {
# Create a temporary directory
temp_dir <- tempdir()
# Create a package in the temporary directory
test_package_name <- "testPackage"
test_author_name <- "Test Author"
test_author_email <- "test@email.com"
test_license_choice <- 1 # MIT license
result <- createOpenSciPackageWrapper(test_package_name, temp_dir, test_author_name, test_author_email, test_license_choice)
# Check that the function returned the correct success message
expect_equal(result, "Open Science Template Package created successfully")
})
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
devtools::load_all("~/rpackages/opensciPackR")
createOpenSciPackageWrapper <- function(package_name, path = NULL, author_name, author_email, license_choice) {
# Simulate the user inputs
utils::menu <- function(choices, title = NULL, graphics = TRUE) license_choice
readline <- function(prompt) {
switch(prompt,
"Enter the author's name: " = author_name,
"Enter the author's email: " = author_email,
stop("Unknown prompt"))
}
createOpenSciPackage(package_name, path)
}
test_that("createOpenSciPackage returns the correct success message", {
# Create a temporary directory
temp_dir <- tempdir()
# Create a package in the temporary directory
test_package_name <- "testPackage"
test_author_name <- "Test Author"
test_author_email <- "test@email.com"
test_license_choice <- 1 # MIT license
result <- createOpenSciPackageWrapper(test_package_name, temp_dir, test_author_name, test_author_email, test_license_choice)
# Check that the function returned the correct success message
expect_equal(result, "Open Science Template Package created successfully")
})
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
rm(list = c("createOpenSciPackageWrapper"))
devtools::load_all("~/rpackages/opensciPackR")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
test_dir <- getwd()
temp_dir <- file.path(test_dir, "temp")
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the DESCRIPTION file exists
expect_true(file.exists(file.path(temp_dir, "testPackage", "DESCRIPTION")))
# Check that the expected R scripts have been created
expect_true(file.exists(file.path(temp_dir, "testPackage", "R", "data_preparation.R")))
expect_true(file.exists(file.path(temp_dir, "testPackage", "R", "data_analysis.R")))
# Check that the expected directories have been created
expect_true(dir.exists(file.path(temp_dir, "testPackage", "data")))
expect_true(dir.exists(file.path(temp_dir, "testPackage", "data-raw")))
expect_true(dir.exists(file.path(temp_dir, "testPackage", "inst")))
expect_true(dir.exists(file.path(temp_dir, "testPackage", "inst", "sandbox")))
expect_true(dir.exists(file.path(temp_dir, "testPackage", "tests")))
# Remove the test directory
unlink(temp_dir, recursive = TRUE)
})
test_dir <- getwd()
temp_dir <- file.path(test_dir, "temp")
setwd("C:/Users/LaraK/Documents/rpackages")
setwd()
test_dir <- getwd()
temp_dir <- file.path(test_dir, "temp")
dir.create(temp_dir)
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
test_dir <- getwd()
temp_dir <- file.path(test_dir, "temp")
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
})
temp_dir <- tempdir()
setwd(temp_dir)
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
devtools::load_all("~/rpackages/opensciPackR")
devtools::load_all("~/rpackages/opensciPackR")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
temp_dir <- tempdir()
setwd(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
})
devtools::load_all("~/rpackages/opensciPackR")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
temp_dir <- tempdir()
setwd(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
})
devtools::load_all("~/rpackages/opensciPackR")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
if (dir.exists(temp_dir)) {
unlink(temp_dir, recursive = TRUE)
}
test_dir <- getwd()
temp_dir <- file.path(test_dir, tempfile())
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
})
setwd("~/rpackages/opensciPackR")
devtools::load_all(".")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
if (dir.exists(temp_dir)) {
unlink(temp_dir, recursive = TRUE)
}
test_dir <- getwd()
temp_dir <- file.path(test_dir, tempfile())
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
})
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
test_dir <- getwd()
temp_dir <- file.path(test_dir, tempfile())
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
if (dir.exists(temp_dir)) {
unlink(temp_dir, recursive = TRUE)
}
})
tempfile()
test_that("createOpenSciPackageWrapper works correctly", {
# Create a temporary directory for the test
test_dir <- getwd()
temp_dir <- file.path(test_dir)
dir.create(temp_dir)
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
if (dir.exists(temp_dir)) {
unlink(temp_dir, recursive = TRUE)
}
})
unlink(temp_dir, recursive = TRUE)
test_that("createOpenSciPackageWrapper works correctly", {
# Create a unique temporary directory for the test
temp_dir <- tempfile()
dir.create(temp_dir)
# Check that the temporary directory was created
expect_true(dir.exists(temp_dir))
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
# Clean up by deleting the temporary directory
unlink(temp_dir, recursive = TRUE)
})
devtools::load_all(".")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a unique temporary directory for the test
temp_dir <- tempfile()
dir.create(temp_dir)
# Check that the temporary directory was created
expect_true(dir.exists(temp_dir))
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
# Clean up by deleting the temporary directory
unlink(temp_dir, recursive = TRUE)
})
devtools::load_all(".")
test_that("createOpenSciPackageWrapper works correctly", {
# Create a unique temporary directory for the test
temp_dir <- tempfile()
dir.create(temp_dir)
# Check that the temporary directory was created
expect_true(dir.exists(temp_dir))
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
# Clean up by deleting the temporary directory
unlink(temp_dir, recursive = TRUE)
})
test_that("createOpenSciPackageWrapper works correctly", {
# Create a unique temporary directory for the test
temp_dir <- tempfile()
# Prepare the package directory
package_dir <- file.path(temp_dir, "testPackage")
if (dir.exists(package_dir)) {
unlink(package_dir, recursive = TRUE)
}
dir.create(temp_dir)
# Check that the temporary directory was created
expect_true(dir.exists(temp_dir))
# Call the function
output <- createOpenSciPackageWrapper("testPackage", temp_dir, "Test Author", "test@author.com", 1)
# Check that the package was created
expect_equal(output, "Open Science Template Package created successfully")
# Check that the package directory was created
expect_true(dir.exists(file.path(temp_dir, "testPackage")))
# Clean up by deleting the temporary directory
unlink(temp_dir, recursive = TRUE)
})
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
usethis::use_test("createOpenSciPackage")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
opensciPackR::createOpenSciPackage("testpackage")
opensciPackR::createOpenSciPackage("testpackage", path = getwd())
opensciPackR::createOpenSciPackage("testpackage", path = "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
warnings()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
warnings()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
setwd("~/rpackages/opensciPackR")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
warnings()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
opensciPackR::createOpenSciPackage(testpack, "C:/Users/LaraK/Documents/test")
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/test")
here::dr_here()
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/test")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
getwd()
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
opensciPackR::createOpenSciPackage("testpack", "C:/Users/LaraK/Documents/rpackages")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
path <- "C:/Users/LaraK/Documents/rpackages"
file.path(path, "R", "data.R")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
getwd()
path <- C:/Users/LaraK/Documents/rpackages/testpack/R/data.R
path <- "C:/Users/LaraK/Documents/rpackages/testpack/R/data.R"
doc_file <- file.path(path, "R", "data.R")
file.create(doc_file)
path <- "C:/Users/LaraK/Documents/rpackages/testpack"
doc_file <- file.path(path, "R", "data.R")
file.create(doc_file)
file.path("R/", paste0("data", ".R", collapse = NULL))
file.path("R", paste0("data", ".R", collapse = NULL))
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
opensciPackR::create_openscipkg("testpack", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all(".")
opensciPackR::create_openscipkg("makispackage", "C:/Users/LaraK/Documents/rpackages")
source(paste0(path, "data-raw", paste0(data_name, ".R", collapse = NULL)))
path <- "C:/Users/LaraK/Documents/rpackages"
source(paste0(path, "data-raw", paste0(data_name, ".R", collapse = NULL)))
new_data_name <- "data"
source(paste0(path, "data-raw", paste0(data_name, ".R", collapse = NULL)))
source(paste0(path, "data-raw", paste0(new_data_name, ".R", collapse = NULL)))
paste0(path, "data-raw", paste0(new_data_name, ".R", collapse = NULL)
)
devtools::load_all(".")
opensciPackR::create_openscipkg("makispackage", "C:/Users/LaraK/Documents/rpackages")
devtools::load_all("~/rpackages/openscipackr")
opensciPackR::create_openscipkg("makispackage", "C:/Users/LaraK/Documents/rpackages")
